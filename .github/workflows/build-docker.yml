name: Build and Docker Push

on:
  release:
    types: [published]
  workflow_dispatch:

env:
  BUILD_TYPE: RelWithDebInfo
  REGISTRY: ghcr.io
  IMAGE_NAME: asadarafat/bngblaster

jobs:
  build-and-docker:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Download RtBrick libdict
        run: wget https://github.com/rtbrick/libdict/releases/download/1.0.4/libdict-ubuntu-22.04.zip

      - name: Install RtBrick libdict
        run: unzip libdict-ubuntu-22.04.zip && sudo dpkg -i libdict_1.0.4_amd64.deb && sudo dpkg -i libdict-dev_1.0.4_amd64.deb

      - name: Install Dependencies
        run: sudo apt install -y libcunit1-dev libncurses-dev libssl-dev libjansson-dev libcmocka-dev libpcap-dev

      - name: Set SOURCE_DATE_EPOCH for reproducible builds
        run: echo "SOURCE_DATE_EPOCH=$(git log -1 --format=%ct)" >> $GITHUB_ENV

      - name: Create Build Directory
        run: cmake -E make_directory ${{ github.workspace }}/build

      - name: Configure with CMake
        working-directory: ${{ github.workspace }}/build
        run: cmake $GITHUB_WORKSPACE \
            -DGIT_REF=$GITHUB_REF \
            -DGIT_SHA=$GITHUB_SHA \
            -DBNGBLASTER_TESTS=ON \
            -DCMAKE_BUILD_TYPE=$BUILD_TYPE \
            -DBNGBLASTER_OS=ubuntu-22.04

      - name: Build
        working-directory: ${{ github.workspace }}/build
        run: cmake --build . --config $BUILD_TYPE

      - name: Run Tests
        working-directory: ${{ github.workspace }}/build
        run: ctest -C $BUILD_TYPE

      - name: Package as DEB
        working-directory: ${{ github.workspace }}/build
        run: cpack -G DEB

      - name: Set Docker version tag
        id: vars
        run: |
          echo "ℹ️ Fetching the latest valid tag from GitHub API..."
          TAG_NAME=$(curl -s https://api.github.com/repos/asadarafat/bngblaster/tags | jq -r '[.[] | select(.name != "delete")][0].name')

          if [[ -z "$TAG_NAME" || "$TAG_NAME" == "null" ]]; then
            echo "❌ No valid tag found. Exiting."
            exit 1
          fi

          echo "✅ Using tag: $TAG_NAME"
          echo "version=$TAG_NAME" >> $GITHUB_OUTPUT


      - name: Generate Dockerfile dynamically
        run: |
          cat <<EOF > Dockerfile
          FROM debian:bullseye-slim

          USER root:root
          RUN echo 'root:admin' | chpasswd

          WORKDIR ./opt/bngblaster

          RUN apt-get update && \
              apt-get install -y sudo iproute2 iputils-ping openssh-server && \
              apt-get clean && rm -rf /var/lib/apt/lists/*

          # Config SSH
          RUN echo "HostKeyAlgorithms ssh-dss,ecdsa-sha2-nistp256,ssh-ed25519" >> /etc/ssh/ssh_config    
          RUN echo "KexAlgorithms diffie-hellman-group1-sha1,curve25519-sha256@libssh.org,ecdh-sha2-nistp256,ecdh-sha2-nistp384,ecdh-sha2-nistp521,diffie-hellman-group-exchange-sha256,diffie-hellman-group14-sha1" >> /etc/ssh/ssh_config    
          RUN service ssh restart

          # Create admin user with sudo access
          RUN useradd -m -s /bin/bash admin && \
              echo "admin:admin" | chpasswd && \
              usermod -aG sudo admin && \
              echo "admin ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers

          COPY build/*.deb /tmp/bngblaster.deb

          RUN dpkg -i /tmp/bngblaster.deb || apt-get update && apt-get install -f -y && \
              rm -rf /var/lib/apt/lists/* /tmp/*.deb

          ENTRYPOINT bash
          EOF

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.vars.outputs.version }}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
